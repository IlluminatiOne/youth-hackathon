
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torchvision\n",
    "\n",
    "model = torchvision.models.alexnet(pretrained=False)\n",
    "model.classifier[6] = torch.nn.Linear(model.classifier[6].in_features, 2)"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Load your own uploaded, ``best_model.pth`` model that has been trained"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<All keys matched successfully>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.load_state_dict(torch.load('best_model.pth'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "device = torch.device('cuda')\n",
    "model = model.to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "mean = 255.0 * np.array([0.485, 0.456, 0.406])\n",
    "stdev = 255.0 * np.array([0.229, 0.224, 0.225])\n",
    "\n",
    "normalize = torchvision.transforms.Normalize(mean, stdev)\n",
    "\n",
    "def preprocess(camera_value):\n",
    "    global device, normalize\n",
    "    x = camera_value\n",
    "    x = cv2.cvtColor(x, cv2.COLOR_BGR2RGB)\n",
    "    x = x.transpose((2, 0, 1))\n",
    "    x = torch.from_numpy(x).float()\n",
    "    x = normalize(x)\n",
    "    x = x.to(device)\n",
    "    x = x[None, ...]\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "cdc557b97a8440589d22b1d3e44a962d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(Image(value=b'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\x00\\x01\\x01\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\xff\\xdb\\x00C…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import traitlets\n",
    "from IPython.display import display\n",
    "import ipywidgets.widgets as widgets\n",
    "from jetbot import Camera, bgr8_to_jpeg\n",
    "\n",
    "camera = Camera.instance(width=224, height=224,fps=10)\n",
    "image = widgets.Image(format='jpeg', width=224, height=224)\n",
    "blocked_slider = widgets.FloatSlider(description='thuocla', min=0.0, max=1.0, orientation='vertical')\n",
    "\n",
    "camera_link = traitlets.dlink((camera, 'value'), (image, 'value'), transform=bgr8_to_jpeg)\n",
    "\n",
    "display(widgets.HBox([image, blocked_slider]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import RPi.GPIO as GPIO\n",
    "import time\n",
    "\n",
    "# Pin Definitions\n",
    "LED3BLUE_pin = 12  \n",
    "Buzzer_pin = 11  \n",
    "GPIO.setmode(GPIO.BOARD)\n",
    "# Set pin to output mode, and set level is high\n",
    "GPIO.setup(12, GPIO.OUT, initial=GPIO.LOW)\n",
    "GPIO.setup(11, GPIO.OUT, initial=GPIO.LOW)\n",
    "def truyen_tin_hieu():\n",
    "    \n",
    "    GPIO.setmode(GPIO.BOARD)\n",
    "    \n",
    "    GPIO.setup(LED3BLUE_pin, GPIO.OUT, initial=GPIO.LOW)\n",
    "    GPIO.setup(Buzzer_pin, GPIO.OUT, initial=GPIO.LOW)\n",
    "    print(\"Start sending sigal  now!\")\n",
    "    curr_value = GPIO.HIGH\n",
    "\n",
    "    GPIO.output(LED3BLUE_pin, curr_value)\n",
    "    GPIO.output(Buzzer_pin, curr_value)\n",
    "    #gửi tin hiệu trong 0.8s sau đó tắt\n",
    "    time.sleep(0.8)\n",
    "    GPIO.output(LED3BLUE_pin, GPIO.LOW)\n",
    "    GPIO.output(Buzzer_pin, GPIO.LOW)\n",
    "    GPIO.cleanup()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import torch.nn.functional as F\n",
    "import time\n",
    "\n",
    "def update(change):\n",
    "    global blocked_slider, robot\n",
    "    x = change['new'] \n",
    "    x = preprocess(x)\n",
    "    y = model(x)\n",
    "    \n",
    "    y = F.softmax(y, dim=1)\n",
    "    \n",
    "    prob_blocked = float(y.flatten()[0])\n",
    "    \n",
    "    blocked_slider.value = prob_blocked\n",
    "\n",
    "    if prob_blocked > 0.78:\n",
    "            # Pin Setup:\n",
    "        # Board pin-numbering scheme\n",
    "\n",
    "\n",
    "        print(\" Phát hiện học sinh Nguyễn Văn A hút thuốc gần hành lang\")\n",
    "        curr_value = GPIO.HIGH\n",
    "\n",
    "        GPIO.output(12, GPIO.HIGH)\n",
    "        GPIO.output(11, GPIO.HIGH)\n",
    "        #gửi tin hiệu trong 0.8s sau đó tắt\n",
    "        time.sleep(0.8)\n",
    "        GPIO.output(12, GPIO.LOW)\n",
    "        GPIO.output(11, GPIO.LOW)\n",
    "       # GPIO.cleanup()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17h01-25/6/2021: Phát hiện học sinh Nguyễn Văn A hút thuốc gần hành lang\n",
      "17h01-25/6/2021: Phát hiện học sinh Nguyễn Văn A hút thuốc gần hành lang\n",
      "17h01-25/6/2021: Phát hiện học sinh Nguyễn Văn A hút thuốc gần hành lang\n"
     ]
    }
   ],
   "source": [
    "        \n",
    "update({'new': camera.value})  # we call the function once to intialize\n",
    "camera.observe(update, names='value')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "camera.stop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# camera_link.unlink()  # don't stream to browser (will still run camera)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you need to re-display refresh, run the following code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# camera_link.link()  # stream to browser (wont run camera)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
